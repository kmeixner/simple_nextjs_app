1) npm install react@latest react-dom@latest next@latest
=> package.js and package-lock.js files are generated (note these SHOULD be committed to the git repository)

2) Add a "next dev" script to your package.json file:

add:
  "scripts": {
    "dev": "next dev"
  },

=> package.json should look something like this afterwards (version may differ):

{
  "scripts": {
    "dev": "next dev"
  },
  "dependencies": {
    "next": "^14.0.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  }
}

3) npm run dev

a) this will cause Next.js to generate an app/layout.js file that looks like this:

export const metadata = {
  title: 'Next.js',
  description: 'Generated by Next.js',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

This can later be used to add UI elements that are shared across all pages (e.g. navigation, footer, etc).

b) NextJs will throw this error:

⨯ ./app/page.js
Error:   × You're importing a component that needs `useState`. This React hook only works in a client component. To fix, mark the file (or its parent) with the `"use client"` directive.
  │
  │  Learn more: https://nextjs.org/docs/app/api-reference/directives/use-client
  │
  │
   ╭─[C:\important\kevinmeixner.com_websites\kevinmeixner_com_demos\not_uploaded\simple_nextjs_app\app\page.js:1:1]
 1 │ import { useState } from 'react';
   ·          ────────
 2 │
 3 │ function Header({ title }) {
 4 │     return <h1>{title ? title : 'Default title'}</h1>;
   ╰────

This is because Next.js uses React Server Components, a new feature that allows React to render on the server.
Server Components don't support useState, so you'll need to use a Client Component instead.

(next chapter will discuss this)
